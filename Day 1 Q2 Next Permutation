
next_permutation : find next lexicographically greater permutation


Problem Statement: Given an array Arr[] of integers, rearrange the numbers of the given array into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange to the lowest possible order (i.e., sorted in ascending order).

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]


Brute Force

we will create a new DS and store all the permutation in it

then we will serach all the possible inputs of it

and after getting all the permutation wwe will print the DS and that DS will be our ans

for c++ we will use hashmap as a DS and for java we will use the Hashmap too.


but the TC will be O(N!xN). and  SC  O(1).
beacuse for each finding we are using the N representation


NOW THE BEST OR OPTIMAL APPROACH

here we will solve this with few simple steps

s1: we will find the increasing sequence , and take that and then start traversing backward

s2: now if i1 is less than i0 , so decrease it by 1 now put i0

s3: now  i2 will be at another index to find the greater than i1

s4: now we see i2 > i1
s6: swap i1 and i2

s7 : then revesre from index i +1

basicall

a[i] < a[i + 1 ]

a[index 2] < a[index[1]

swap (a[index2] , a[index1])

reverse (index i + 1 to last index)


class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length <=1) return;
        int i = nums.length - 2;


        while(i >= 0 && nums[i] >= nums[ i + 1]) i--;
        if(i >= 0 ) {
            int j = nums.length - 1;
            while( nums [j] <= nums[i]) j--;
            swap(nums, i ,j);
        }
        reverse(nums, i+ 1 , nums.length-1);
        
    }

    public void swap(int [] nums , int i , int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int [] nums, int i ,int j){
        while(i <j) swap( nums , i++, j--);
    }


}


TC : O(3N) n is the size of the array









