You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

class Solution {
    public int singleNonDuplicate(int[] nums) {
        //this below method is used with the XOR method
        // p ^p = 0
        // p ^ 0 = p
        //TC O(N)
        // int n = nums.length;
        // int ele = 0;
        // for(int i =0; i< n; i++){
        //     ele= ele ^ nums[i];
                   
        //             }
        //             return ele;


        // now using the binary search method to optimse the solution of it

        int low = 0, hi = nums.length - 2;
         while( low <= hi){
             int mid = (low + hi) /2;
             if(mid % 2 ==0){
                 //checking wether we are in right half

                 if(nums [mid] != nums[mid + 1])
                 //shrinking the right half
                 hi = mid -1;
                 
                 else
                //shrinking the left half
                low = mid + 1;
                
             }

             else{
                 //checking wether we are in right half
                 if(nums[mid] == nums[mid + 1])
                 //shrinking the right half
                 hi = mid - 1;
                 else
                 // shrinking the left half
                 low = mid + 1;
             }
         }     
         return nums[low];
    }
}
