Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]


class Solution {

    void func(int index, int [] nums,List<List<Integer>> ans ){
        if(index == nums.length){
            List<Integer> ds = new ArrayList<>();

            for(int i =0 ; i < nums.length; i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }

        for(int i = index; i < nums.length; i++){
            swap(i, index, nums);
            func(index+ 1, nums,ans);
            swap(i, index, nums);
        }
    }

    void swap(int i , int j , int nums[]){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        
        func(0, nums, ans);
        return ans;
    }
}
