Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {


        Queue<TreeNode> queue = new LinkedList<TreeNode>(); // to pust the root in it
        List<List<Integer>> WrapList = new ArrayList<List<Integer>>(); // to store the answer

        if(root == null){
        return WrapList;
        }

        queue.add(root);
        while(!queue.isEmpty()){

            int levelnum = queue.size();

            List<Integer> sublist = new ArrayList<>();

            for(int i =0; i <levelnum; i++){
                if(queue.peek().left != null){
                    
                 queue.add(queue.peek().left);
                }
                if(queue.peek().right != null) 
                {

                queue.add(queue.peek().right);
            }
                sublist.add(queue.remove().val);
                //  subLevels.add(q.remove().val);
            }

            WrapList.add(sublist);
        }
        return WrapList;


        
    }
}
