You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Native Approach

we can use the liner search but the TC will be O(M * M)

so we will use the Binary search for it TC will be O(log(m * m))

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int lo =0;
        if(matrix.length == 0) return false;

        int n = matrix.length;
        int m = matrix[0].length;
        int hi = (n *m) -1;
        
        while(lo <= hi){
            int mid = (lo + (hi - lo)/2);
            if(matrix[mid/m][mid%m] == target){
                return true;
            }
            if(matrix[mid/m][mid%m] < target){
                lo = mid + 1;
            }
            else{
                hi = mid - 1;
            }
        }
        
    
    return false;
}
}
