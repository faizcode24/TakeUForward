#   Binary Search

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.




// import java.util.*;
// class Solution {
//     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
//         int n= nums1.length;
//         int m = nums2.length;
//         // if(nums2.size() < nums1.size()) 
//         if(m  > n)
//          return findMedianSortedArrays(nums2, nums1);
       
       
//         int low = 0;
//         int high = m;
        

//         while(low <= high){
//             int mid = ((m + n ) + 1)/ 2;
//             int cut1 = (low + high) >> 1;
//             int cut2 = mid - cut1;

           

//         double l1 = (cut1 == 0)? Integer.MIN_VALUE:nums1[cut1 - 1];
//         double l2 = (cut2 == 0)? Integer.MIN_VALUE:nums2[cut2 - 1];
//         double r1 = (cut1 == m)? Integer.MAX_VALUE:nums1[cut1];
//         double r2 = (cut2 == n)? Integer.MAX_VALUE:nums2[cut2];

//             if(l1 <= r2 && l2 <= r1){
//                 if((m + n) % 2 != 0)
//                 return Math.max(l1,l2);

//                 else
//                 return (Math.max(l1, l2) + Math.min(r1,r2))/2.0;
//             } 

//             else if(l1> l2 ) high = cut1 - 1;

//             else low = cut1 + 1; 
//         }
//         return 0.0;
        
//     }
// }

//int the above solution the integer is going out of index range

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length < nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int low = 0;
        int high = nums2.length * 2;
        while (low <= high) {
            int midTwo = (low + high) / 2;
            int midOne = nums1.length + nums2.length - midTwo;
            double leftOne = (midOne == 0) ? Integer.MIN_VALUE : nums1[(midOne - 1) / 2];	
            double leftTwo = (midTwo == 0) ? Integer.MIN_VALUE : nums2[(midTwo - 1) / 2];
            double rightOne = (midOne == nums1.length * 2) ? Integer.MAX_VALUE : nums1[(midOne) / 2];
            double rightTwo = (midTwo == nums2.length * 2) ? Integer.MAX_VALUE : nums2[(midTwo) / 2];
            if (leftOne > rightTwo) {
                low = midTwo + 1;
            } else if (leftTwo > rightOne) {
                high = midTwo - 1;
            } else {
                return (Math.max(leftOne, leftTwo) + Math.min(rightOne, rightTwo)) / 2;	
            }
        }
        return -1;
    }
}
